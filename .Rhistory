y <- ts(ts_chf_eu$Rate, frequency = 365, start = c(2020, 1))
y_diff <- diff(y)
# Visualizations ----
# Centered yearly time series
ggplot(ts_chf_eu %>% group_by(Year) %>% mutate(Rate = Rate - mean(Rate)) %>% ungroup(),
aes(x = DayOfYear, y = Rate, color = Year, group = Year)) +
geom_line() +
labs(x = "Days from Start of Year", y = "EUR/CHF (Centered)",
title = "Time Series for Each Year (Centered and Overlapped)") +
theme_minimal()
# Train-Test Split ----
n_sample <- floor(0.9 * length(y_diff))
y_train <- subset(y_diff, start = 1, end = n_sample)
y_test <- subset(y_diff, start = n_sample + 1)
# Classic Linear Model ----
ts_chf_eu$Year <- factor(ts_chf_eu$Year, levels = c(levels(ts_chf_eu$Year), "2025"))
fit_lm <- lm(Rate ~ DayOfYear + Year, data = ts_chf_eu)
summary(fit_lm)
cat("Linear Model AIC:", AIC(fit_lm), "\n")
cat("Linear Model BIC:", BIC(fit_lm), "\n")
# Predictions
lm_forecast <- predict(fit_lm, newdata = ts_chf_eu)
plot_train_pred(ts_chf_eu$Rate, lm_forecast, "Linear Model")
lm_metrics <- calculate_metrics(ts_chf_eu$Rate, lm_forecast, "Linear Model")
# Generalized Additive Model (GAM) ----
gam_model <- gam(Rate ~ s(DayOfYear, bs = "cs") + Year, data = ts_chf_eu)
summary(gam_model)
cat("GAM AIC:", AIC(gam_model), "\n")
cat("GAM BIC:", BIC(gam_model), "\n")
# Align prediction length with training data
gam_forecast <- predict(gam_model, newdata = ts_chf_eu[1:length(y_train), ])
plot_train_pred(y_train, gam_forecast, "GAM")
gam_metrics <- calculate_metrics(y_train, gam_forecast, "GAM")
# ARIMA and Extensions ----
fit_arima <- auto.arima(y_train)
summary(fit_arima)
cat("ARIMA AIC:", fit_arima$aic, "\n")
cat("ARIMA BIC:", BIC(fit_arima), "\n")
forecast_arima <- forecast(fit_arima, h = length(y_test))
plot(forecast_arima, main = "ARIMA Forecast")
arima_metrics <- calculate_metrics(y_test, forecast_arima$mean, "ARIMA")
# Bass Model ----
fit_bm <- BM(y_train, display = TRUE)
summary(fit_bm)
# Gradient Boosting ----
boost_model <- gbm(
formula = Rate ~ Year + DayOfYear,
data = ts_chf_eu,
distribution = "gaussian",
n.trees = 500,
interaction.depth = 4
)
summary(boost_model)
# Align prediction length with training data
gb_forecast <- predict(boost_model, newdata = ts_chf_eu[1:length(y_train), ], n.trees = 500)
plot_train_pred(y_train, gb_forecast, "Gradient Boosting")
gb_metrics <- calculate_metrics(y_train, gb_forecast, "Gradient Boosting")
# Prophet ----
prophet_data <- data.frame(ds = ts_chf_eu$DATE, y = ts_chf_eu$Rate)
prophet_model <- prophet(prophet_data)
future <- make_future_dataframe(prophet_model, periods = 365)
forecast_prophet <- predict(prophet_model, future)
plot(prophet_model, forecast_prophet)
prophet_metrics <- calculate_metrics(ts_chf_eu$Rate, forecast_prophet$yhat[1:length(ts_chf_eu$Rate)], "Prophet")
# Model Comparison ----
model_comparison <- data.frame(
Model = c("Linear Model", "GAM", "ARIMA", "Gradient Boosting", "Prophet"),
AIC = c(AIC(fit_lm), AIC(gam_model), fit_arima$aic, NA, NA),
BIC = c(BIC(fit_lm), BIC(gam_model), BIC(fit_arima), NA, NA),
RMSE = c(lm_metrics["RMSE"], gam_metrics["RMSE"], arima_metrics["RMSE"], gb_metrics["RMSE"], prophet_metrics["RMSE"]),
MAE = c(lm_metrics["MAE"], gam_metrics["MAE"], arima_metrics["MAE"], gb_metrics["MAE"], prophet_metrics["MAE"]),
MAPE = c(lm_metrics["MAPE"], gam_metrics["MAPE"], arima_metrics["MAPE"], gb_metrics["MAPE"], prophet_metrics["MAPE"])
)
print(model_comparison)
library(readr)
data <- read_csv("Data/data.csv")
View(data)
rm(list=ls())
library(readxl)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(forecast)
library(lmtest) # DW test
library(DIMORA) # BASS Model
split_train_test = function(data, name_y, prop){
n_sample = nrow(data)*prop
train = data[1:n_sample, ]
y_train = train[[name_y]]
test = data[(n_sample+1):nrow(data),]
y_test = test[[name_y]]
return(list(train = train, y_train = y_train, test = test, y_test = y_test))
}
plot_train_test = function(train_test, name_y){
train_length <- length(train_test$y_train)
test_length <- length(train_test$y_test)
time_index <- c(1:(train_length + test_length))
data_plot <- data.frame(
Time = time_index,
Value = c(as.numeric(train_test$y_train), as.numeric(train_test$y_test)),
Type = c(rep("Train", train_length), rep("Test", test_length))
)
ggplot(data_plot, aes(x = Time, y = Value, color = Type)) +
geom_line() +
labs(title = paste(name_y, ": Train vs Test"),
x = "Tempo",
y = "Valore") +
scale_color_manual(values = c("Train" = "blue", "Test" = "red")) +
theme_minimal()
}
compute_AIC <- function(n, RSS, k) {
# GUARDA DOCUMENTAZIONE AIC: ?AIC
logLik <- -n / 2 * (log(2 * pi) + log(RSS / n) + 1)
AIC <- -2 * logLik + 2 * k
return(AIC)
}
plot_train_pred <- function(y_train,
y_pred,
model_name){
plot_data = data.frame(
Time = 1:length(y_train),
Observed = y_train,
Predicted = y_pred)
ggplot(plot_data, aes(x = Time)) +
geom_line(aes(y = Observed),
color = "blue", linewidth = 1) +
geom_line(aes(y = Predicted), color = "red",
linewidth = 1) +
labs(
title = paste("Observed and Predicted Values\nModel:",model_name),
x = "Time",
y = "Values"
) +
theme_minimal()
}
################################################################################
# Load Data and Manipulation
################################################################################
library(tidyverse)
data <-  data <- read_csv("Data/data.csv")
# Trasforma la colonna 'Date' in formato Date
data$Date <- as.Date(data$Date, format = "%Y-%m-%d")
# Check for NA values
colSums(is.na(data))
data <- data %>%
mutate(Month = format(Date, "%m"),
Year = as.factor(format(Date, "%Y"))
)
head(data)
library(ggplot2)
ggplot(data, aes(x = Date)) +
geom_line(aes(y = Baccala_Mantecato, color = "Baccala Mantecato")) +
geom_line(aes(y = Baccala_Vicentina, color = "Baccala Vicentina")) +
labs(title = "Serie Storica di Baccala Mantecato e Baccala Vicentina",
x = "Data",
y = "Quantità") +
scale_color_manual(values = c("Baccala Mantecato" = "blue", "Baccala Vicentina" = "red"),
name = "Tipologia") +
theme_minimal()
ggplot(data, aes(x = Month, y = Baccala_Mantecato, color = Year, group = Year)) +
geom_line() +
labs(x = "Days from Start of Year", y = "Baccala_Mantecato",
title = "Time Series for Each Year") +
theme_minimal() +
theme(legend.title = element_blank())
ggplot(data, aes(x = Month, y = Baccala_Vicentina, color = Year, group = Year)) +
geom_line() +
labs(x = "Month of the Year", y = "Baccala_Mantecato",
title = "Time Series for Each Year") +
theme_minimal() +
theme(legend.title = element_blank())
ym = ts(data$Baccala_Mantecato, frequency = 12, start = c(2020,01))
yv = ts(data$Baccala_Vicentina, frequency = 12, start = c(2020,01))
plot.ts(yv)
plot.ts(ym)
# Stationary check
acf(data$Baccala_Mantecato)
acf(data$Baccala_Vicentina)
train_testm <- split_train_test(data, "Baccala_Mantecato", 0.9)
train_testm
rm(list=ls())
library(readxl)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(forecast)
library(lmtest) # DW test
library(DIMORA) # BASS Model
split_train_test = function(data, name_y, prop){
n_sample = floor(nrow(data)*prop)
train = data[1:n_sample, ]
y_train = train[[name_y]]
test = data[(n_sample+1):nrow(data),]
y_test = test[[name_y]]
return(list(train = train, y_train = y_train, test = test, y_test = y_test))
}
plot_train_test = function(train_test, name_y){
train_length <- length(train_test$y_train)
test_length <- length(train_test$y_test)
time_index <- c(1:(train_length + test_length))
data_plot <- data.frame(
Time = time_index,
Value = c(as.numeric(train_test$y_train), as.numeric(train_test$y_test)),
Type = c(rep("Train", train_length), rep("Test", test_length))
)
ggplot(data_plot, aes(x = Time, y = Value, color = Type)) +
geom_line() +
labs(title = paste(name_y, ": Train vs Test"),
x = "Tempo",
y = "Valore") +
scale_color_manual(values = c("Train" = "blue", "Test" = "red")) +
theme_minimal()
}
compute_AIC <- function(n, RSS, k) {
# GUARDA DOCUMENTAZIONE AIC: ?AIC
logLik <- -n / 2 * (log(2 * pi) + log(RSS / n) + 1)
AIC <- -2 * logLik + 2 * k
return(AIC)
}
plot_train_pred <- function(y_train,
y_pred,
model_name){
plot_data = data.frame(
Time = 1:length(y_train),
Observed = y_train,
Predicted = y_pred)
ggplot(plot_data, aes(x = Time)) +
geom_line(aes(y = Observed),
color = "blue", linewidth = 1) +
geom_line(aes(y = Predicted), color = "red",
linewidth = 1) +
labs(
title = paste("Observed and Predicted Values\nModel:",model_name),
x = "Time",
y = "Values"
) +
theme_minimal()
}
################################################################################
# Load Data and Manipulation
################################################################################
library(tidyverse)
data <-  data <- read_csv("Data/data.csv")
# Trasforma la colonna 'Date' in formato Date
data$Date <- as.Date(data$Date, format = "%Y-%m-%d")
# Check for NA values
colSums(is.na(data))
data <- data %>%
mutate(Month = format(Date, "%m"),
Year = as.factor(format(Date, "%Y"))
)
head(data)
library(ggplot2)
ggplot(data, aes(x = Date)) +
geom_line(aes(y = Baccala_Mantecato, color = "Baccala Mantecato")) +
geom_line(aes(y = Baccala_Vicentina, color = "Baccala Vicentina")) +
labs(title = "Serie Storica di Baccala Mantecato e Baccala Vicentina",
x = "Data",
y = "Quantità") +
scale_color_manual(values = c("Baccala Mantecato" = "blue", "Baccala Vicentina" = "red"),
name = "Tipologia") +
theme_minimal()
ggplot(data, aes(x = Month, y = Baccala_Mantecato, color = Year, group = Year)) +
geom_line() +
labs(x = "Days from Start of Year", y = "Baccala_Mantecato",
title = "Time Series for Each Year") +
theme_minimal() +
theme(legend.title = element_blank())
ggplot(data, aes(x = Month, y = Baccala_Vicentina, color = Year, group = Year)) +
geom_line() +
labs(x = "Month of the Year", y = "Baccala_Mantecato",
title = "Time Series for Each Year") +
theme_minimal() +
theme(legend.title = element_blank())
ym = ts(data$Baccala_Mantecato, frequency = 12, start = c(2020,01))
yv = ts(data$Baccala_Vicentina, frequency = 12, start = c(2020,01))
plot.ts(yv)
plot.ts(ym)
# Stationary check
acf(data$Baccala_Mantecato)
acf(data$Baccala_Vicentina)
train_testm <- split_train_test(data, "Baccala_Mantecato", 0.9)
plot_train_test(train_testm, "Baccala_Mantecato")
train_testv <- split_train_test(data, "Baccala_Vicentina", 0.9)
plot_train_test(train_testv, "Baccala_Vicentina")
trainm = train_testm$train
y_train_m = train_testm$y_train
testm = train_testm$test
y_test_m = train_testm$y_test
trainv = train_testv$train
y_train_v = train_testv$y_train
testv = train_testv$test
y_test_v = train_testv$y_test
tt = 1:nrow(trainm)
fit_LR_trend <- lm(y_train_m ~ tt)
summary(fit_LR_trend)
plot_train_pred(y_train = y_train_m,
y_pred = predict(fit_LR_trend),
model_name = "Linear Regression w/ Monthly Seasonality")
fit_LR_month <- lm(y_train_m ~ tt + trainm$Month)
summary(fit_LR_month)
plot_train_pred(y_train = y_train_m,
y_pred = predict(fit_LR_month),
model_name = "Linear Regression w/ Monthly Seasonality")
fit_LR_year <- lm(y_train_m ~ tt + trainm$Year)
summary(fit_LR_year)
plot_train_pred(y_train = y_train_m,
y_pred = predict(fit_LR_year),
model_name = "Linear Regression w/ Monthly Seasonality")
##
fit_LR_year_month <- lm(y_train_m ~ tt + trainm$Year + trainm$Month)
summary(fit_LR_year_month)
plot_train_pred(y_train = y_train_m,
y_pred = predict(fit_LR_year_month),
model_name = "Linear Regression w/ Monthly Seasonality")
res_LR_year_month <- residuals(fit_LR_year_month)
plot(res_LR_year_month, ylab="residuals")
library(lmtest)
dwtest(fit_LR_year_month)
AIC(fit_LR_month)
AIC(fit_LR_year)
AIC(fit_LR_year_month) # lower AIC-->best model
y_train_tsm = ts(y_train_m, start = c(2021, 01), freq = 12)
end(y_train_tsm)
library(DIMORA)
fit_BM <- BM(y_train_tsm, display = TRUE)
summary(fit_BM)
AIC_BM <- compute_AIC(n = length(fit_BM$data),
RSS = fit_BM$RSS,
k = length(fit_BM$coefficients))
AIC_BM
library(mgcv)
trainm$Month <- as.numeric(trainm$Month)
gam_model <- gam(Baccala_Mantecato ~ s(Month), data = trainm)
summary(gam_model)
# leggendo documentazione, sembra figo -> https://www.rdocumentation.org/packages/mgcv/versions/1.9-1/topics/gam
plot(gam_model, pages=1, seWithMean=TRUE)
gam.check(gam_model)
gam_forecast <- predict(gam_model, newdata = trainm)
AIC(gam_model)
plot_train_pred(y_train = trainm$Baccala_Mantecato,
y_pred = gam_forecast,
model_name = "GAM Model")
res_GAM <- residuals(gam_model)
plot(res_GAM, ylab="residuals")
dwtest(gam_model)
rm(list=ls())
library(readxl)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(forecast)
library(lmtest) # DW test
library(DIMORA) # BASS Model
split_train_test = function(data, name_y, prop){
n_sample = floor(nrow(data)*prop)
train = data[1:n_sample, ]
y_train = train[[name_y]]
test = data[(n_sample+1):nrow(data),]
y_test = test[[name_y]]
return(list(train = train, y_train = y_train, test = test, y_test = y_test))
}
plot_train_test = function(train_test, name_y){
train_length <- length(train_test$y_train)
test_length <- length(train_test$y_test)
time_index <- c(1:(train_length + test_length))
data_plot <- data.frame(
Time = time_index,
Value = c(as.numeric(train_test$y_train), as.numeric(train_test$y_test)),
Type = c(rep("Train", train_length), rep("Test", test_length))
)
ggplot(data_plot, aes(x = Time, y = Value, color = Type)) +
geom_line() +
labs(title = paste(name_y, ": Train vs Test"),
x = "Tempo",
y = "Valore") +
scale_color_manual(values = c("Train" = "blue", "Test" = "red")) +
theme_minimal()
}
compute_AIC <- function(n, RSS, k) {
# GUARDA DOCUMENTAZIONE AIC: ?AIC
logLik <- -n / 2 * (log(2 * pi) + log(RSS / n) + 1)
AIC <- -2 * logLik + 2 * k
return(AIC)
}
plot_train_pred <- function(y_train,
y_pred,
model_name){
plot_data = data.frame(
Time = 1:length(y_train),
Observed = y_train,
Predicted = y_pred)
ggplot(plot_data, aes(x = Time)) +
geom_line(aes(y = Observed),
color = "blue", linewidth = 1) +
geom_line(aes(y = Predicted), color = "red",
linewidth = 1) +
labs(
title = paste("Observed and Predicted Values\nModel:",model_name),
x = "Time",
y = "Values"
) +
theme_minimal()
}
################################################################################
# Load Data and Manipulation
################################################################################
library(tidyverse)
data <-  data <- read_csv("Data/data.csv")
# Trasforma la colonna 'Date' in formato Date
data$Date <- as.Date(data$Date, format = "%Y-%m-%d")
# Check for NA values
colSums(is.na(data))
data <- data %>%
mutate(Month = format(Date, "%m"),
Year = as.factor(format(Date, "%Y"))
)
head(data)
library(ggplot2)
ggplot(data, aes(x = Date)) +
geom_line(aes(y = Baccala_Mantecato, color = "Baccala Mantecato")) +
geom_line(aes(y = Baccala_Vicentina, color = "Baccala Vicentina")) +
labs(title = "Serie Storica di Baccala Mantecato e Baccala Vicentina",
x = "Data",
y = "Quantità") +
scale_color_manual(values = c("Baccala Mantecato" = "blue", "Baccala Vicentina" = "red"),
name = "Tipologia") +
theme_minimal()
ggplot(data, aes(x = Month, y = Baccala_Mantecato, color = Year, group = Year)) +
geom_line() +
labs(x = "Days from Start of Year", y = "Baccala_Mantecato",
title = "Time Series for Each Year") +
theme_minimal() +
theme(legend.title = element_blank())
ggplot(data, aes(x = Month, y = Baccala_Vicentina, color = Year, group = Year)) +
geom_line() +
labs(x = "Month of the Year", y = "Baccala_Mantecato",
title = "Time Series for Each Year") +
theme_minimal() +
theme(legend.title = element_blank())
ym = ts(data$Baccala_Mantecato, frequency = 12, start = c(2020,01))
yv = ts(data$Baccala_Vicentina, frequency = 12, start = c(2020,01))
plot.ts(yv)
plot.ts(ym)
# Stationary check
acf(data$Baccala_Mantecato)
acf(data$Baccala_Vicentina)
train_testm <- split_train_test(data, "Baccala_Mantecato", 0.9)
plot_train_test(train_testm, "Baccala_Mantecato")
train_testv <- split_train_test(data, "Baccala_Vicentina", 0.9)
plot_train_test(train_testv, "Baccala_Vicentina")
trainm = train_testm$train
y_train_m = train_testm$y_train
testm = train_testm$test
y_test_m = train_testm$y_test
trainv = train_testv$train
y_train_v = train_testv$y_train
testv = train_testv$test
y_test_v = train_testv$y_test
tt = 1:nrow(trainm)
fit_LR_trend <- lm(y_train_m ~ tt)
summary(fit_LR_trend)
plot_train_pred(y_train = y_train_m,
y_pred = predict(fit_LR_trend),
model_name = "Linear Regression w/ Monthly Seasonality")
fit_LR_month <- lm(y_train_m ~ tt + trainm$Month)
summary(fit_LR_month)
plot_train_pred(y_train = y_train_m,
y_pred = predict(fit_LR_month),
model_name = "Linear Regression w/ Monthly Seasonality")
fit_LR_year <- lm(y_train_m ~ tt + trainm$Year)
summary(fit_LR_year)
plot_train_pred(y_train = y_train_m,
y_pred = predict(fit_LR_year),
model_name = "Linear Regression w/ Monthly Seasonality")
##
fit_LR_year_month <- lm(y_train_m ~ tt + trainm$Year + trainm$Month)
summary(fit_LR_year_month)
plot_train_pred(y_train = y_train_m,
y_pred = predict(fit_LR_year_month),
model_name = "Linear Regression w/ Monthly Seasonality")
res_LR_year_month <- residuals(fit_LR_year_month)
plot(res_LR_year_month, ylab="residuals")
library(lmtest)
dwtest(fit_LR_year_month)
AIC(fit_LR_month)
AIC(fit_LR_year)
AIC(fit_LR_year_month) # lower AIC-->best model
y_train_tsm = ts(y_train_m, start = c(2021, 01), freq = 12)
end(y_train_tsm)
library(DIMORA)
fit_BM <- BM(y_train_tsm, display = TRUE)
summary(fit_BM)
AIC_BM <- compute_AIC(n = length(fit_BM$data),
RSS = fit_BM$RSS,
k = length(fit_BM$coefficients))
AIC_BM
library(mgcv)
trainm$Month <- as.numeric(trainm$Month)
gam_model <- gam(Baccala_Mantecato ~ s(Month), data = trainm)
summary(gam_model)
# leggendo documentazione, sembra figo -> https://www.rdocumentation.org/packages/mgcv/versions/1.9-1/topics/gam
plot(gam_model, pages=1, seWithMean=TRUE)
gam.check(gam_model)
gam_forecast <- predict(gam_model, newdata = trainm)
AIC(gam_model)
plot_train_pred(y_train = trainm$Baccala_Mantecato,
y_pred = gam_forecast,
model_name = "GAM Model")
res_GAM <- residuals(gam_model)
plot(res_GAM, ylab="residuals")
dwtest(gam_model)
